name: Build and Deploy Orion Website

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: 'orion-website'
  AZURE_RESOURCE_GROUP: 'orion-website-rg'
  SQL_SERVER_NAME: 'orionweb-sqlserver'
  SQL_DATABASE_NAME: 'OrionWebDB'

jobs:
  build:
    runs-on: windows-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Option 1: If it's a .NET Framework 4.8 application with solution file
      - name: Setup MSBuild (if needed)
        uses: microsoft/setup-msbuild@v1.1
        if: hashFiles('**/*.sln') != ''
      
      - name: Setup NuGet (if needed)
        uses: NuGet/setup-nuget@v1.2.0
        if: hashFiles('**/*.sln') != ''
      
      - name: Restore NuGet packages (if needed)
        run: |
          if (Test-Path -Path "*.sln") {
            nuget restore *.sln
          }
        shell: pwsh
      
      - name: Build solution (if needed)
        run: |
          if (Test-Path -Path "*.sln") {
            msbuild /p:Configuration=Release /p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="${{ github.workspace }}\published"
          }
        shell: pwsh
      
      # Option 2: If it's just static files or simpler web application
      - name: Package website content
        run: |
          # Create a deployment package for the website
          if (-not (Test-Path -Path "${{ github.workspace }}\published\*.zip")) {
            # If we didn't build a .NET app above, package directly
            New-Item -Path "${{ github.workspace }}\_temp" -ItemType Directory -Force
            
            # Get website files but exclude database scripts, github workflow files, and the published directory itself
            Get-ChildItem -Path "${{ github.workspace }}" -Exclude ".git", ".github", "Database-Script", "published", "_temp" | 
              Copy-Item -Destination "${{ github.workspace }}\_temp" -Recurse -Force
            
            # Create published directory
            New-Item -Path "${{ github.workspace }}\published" -ItemType Directory -Force
            
            # Create a zip package
            Compress-Archive -Path "${{ github.workspace }}\_temp\*" -DestinationPath "${{ github.workspace }}\published\site.zip" -Force
            
            # Clean up temp directory
            Remove-Item -Path "${{ github.workspace }}\_temp" -Recurse -Force -ErrorAction SilentlyContinue
          }
        shell: pwsh
      
      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: website-package
          path: ${{ github.workspace }}\published\**\*.zip

  deploy-database:
    runs-on: windows-latest
    needs: build
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Check for SQL scripts
        id: check-scripts
        run: |
          if (Test-Path -Path "${{ github.workspace }}\Database-Script\*.sql") {
            echo "has_scripts=true" >> $env:GITHUB_OUTPUT
          } else {
            echo "has_scripts=false" >> $env:GITHUB_OUTPUT
            Write-Host "No SQL scripts found in Database-Script folder. Skipping database deployment."
          }
        shell: pwsh
      
      # Directly deploy SQL scripts using Azure CLI 
      - name: Deploy SQL Scripts Using Azure CLI
        if: steps.check-scripts.outputs.has_scripts == 'true'
        env:
          SQL_USERNAME: ${{ secrets.AZURE_SQL_USERNAME }}
        run: |
          # Preprocess SQL scripts to handle SqlDeploymentUser variable
          $scriptFiles = Get-ChildItem -Path "${{ github.workspace }}\Database-Script\*.sql" | Sort-Object Name
          
          foreach ($script in $scriptFiles) {
            $scriptContent = Get-Content -Path $script.FullName -Raw
            
            # Check if the script contains variables that need substitution
            if ($scriptContent -match '\$\(SqlDeploymentUser\)') {
              Write-Host "Script $($script.Name) contains SqlDeploymentUser variable - replacing with $env:SQL_USERNAME"
              
              # Replace the variable with the actual username
              $updatedContent = $scriptContent.Replace('$(SqlDeploymentUser)', $env:SQL_USERNAME)
              
              # Write back the modified script
              Set-Content -Path $script.FullName -Value $updatedContent
              
              Write-Host "Updated script content with username substitution"
            }
          }
          
          # Now execute each script
          $scriptFiles = Get-ChildItem -Path "${{ github.workspace }}\Database-Script\*.sql" | Sort-Object Name
          
          if ($scriptFiles.Count -gt 0) {
            Write-Host "Found $($scriptFiles.Count) SQL scripts to execute. Running in order..."
            $hasErrors = $false
            
            foreach ($script in $scriptFiles) {
              Write-Host "`nExecuting: $($script.Name)"
              
              # Try using Azure CLI
              try {
                # Execute script using Azure CLI with the correct command
                Write-Host "Executing SQL script via Azure CLI..."
                az sql db run-query --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --server ${{ env.SQL_SERVER_NAME }} --name ${{ env.SQL_DATABASE_NAME }} --file "$($script.FullName)" --query-timeout 120
                
                Write-Host "SQL script execution successful via Azure CLI"
              }
              catch {
                Write-Warning "Error executing script via Azure CLI: $_"
                $hasErrors = $true
                # Continue with next script - we'll try PowerShell method next if needed
              }
            }
            
            # If we had errors with Azure CLI, let's try PowerShell method
            if ($hasErrors) {
              Write-Host "Some scripts failed using Azure CLI. Will try SqlServer PowerShell module next."
              throw "Moving to PowerShell method"
            }
          }
        shell: pwsh
        continue-on-error: true
        id: azure-cli-deploy
      
      # Install SqlServer PowerShell module with AllowClobber
      - name: Install SQL Server PowerShell Module
        if: steps.check-scripts.outputs.has_scripts == 'true' && steps.azure-cli-deploy.outcome != 'success'
        run: |
          Write-Host "Installing SqlServer PowerShell module..."
          
          # First check what commands are available
          Write-Host "Checking for existing SQL cmdlets..."
          $existingSqlCmds = Get-Command -Name *-Sql* | Select-Object -ExpandProperty Name
          if ($existingSqlCmds) {
            Write-Host "Found existing SQL cmdlets: $($existingSqlCmds -join ', ')"
          }
          
          # Install with AllowClobber flag
          try {
            Install-Module -Name SqlServer -Force -Scope CurrentUser -SkipPublisherCheck -AllowClobber -Verbose
            Import-Module SqlServer -Force
            Write-Host "SqlServer module installed and imported successfully."
          }
          catch {
            Write-Warning "Error installing SqlServer module: $_"
            
            # Check if Invoke-Sqlcmd is available despite module installation issues
            if (Get-Command Invoke-Sqlcmd -ErrorAction SilentlyContinue) {
              Write-Host "Invoke-Sqlcmd command is available despite installation issues."
            } else {
              Write-Error "Invoke-Sqlcmd command is not available. SQL scripts execution will fail."
              exit 1
            }
          }
        shell: pwsh
      
      # Execute SQL scripts using PowerShell's Invoke-Sqlcmd
      - name: Deploy SQL Scripts Using PowerShell
        if: steps.check-scripts.outputs.has_scripts == 'true' && steps.azure-cli-deploy.outcome != 'success'
        env:
          SQL_USERNAME: ${{ secrets.AZURE_SQL_USERNAME }}
          SQL_PASSWORD: ${{ secrets.AZURE_SQL_PASSWORD }}
        run: |
          # Get the script files in order
          $scriptFiles = Get-ChildItem -Path "${{ github.workspace }}\Database-Script\*.sql" | Sort-Object Name
          
          if ($scriptFiles.Count -gt 0) {
            Write-Host "Found $($scriptFiles.Count) SQL scripts to execute using PowerShell method..."
            $hasErrors = $false
            
            # Define connection parameters
            $serverName = "${{ env.SQL_SERVER_NAME }}.database.windows.net"
            $databaseName = "${{ env.SQL_DATABASE_NAME }}"
            
            # Verify SQL credentials are available
            if ([string]::IsNullOrEmpty($env:SQL_USERNAME) -or [string]::IsNullOrEmpty($env:SQL_PASSWORD)) {
              Write-Error "SQL authentication credentials are not available. Please set AZURE_SQL_USERNAME and AZURE_SQL_PASSWORD secrets."
              exit 1
            }
            
            # Build a connection string
            $connectionString = "Server=$serverName;Database=$databaseName;User ID=$($env:SQL_USERNAME);Password=$($env:SQL_PASSWORD);Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;"
            
            Write-Host "Using server: $serverName"
            Write-Host "Using database: $databaseName"
            Write-Host "Using username: $($env:SQL_USERNAME)"
            
            foreach ($script in $scriptFiles) {
              Write-Host "Executing: $($script.Name)"
              
              # Execute SQL using Invoke-Sqlcmd with connection string
              $maxRetries = 3
              $retryCount = 0
              $success = $false
              
              while (-not $success -and $retryCount -lt $maxRetries) {
                try {
                  # Read the script content
                  $sqlContent = Get-Content -Path "$($script.FullName)" -Raw
                  
                  # Define any variables we might need
                  $scriptVariables = @{
                    "SqlDeploymentUser" = "$env:SQL_USERNAME"
                  }
                  
                  # Execute the script with explicit variables
                  # Note: We're specifying these parameters individually for clarity
                  Invoke-Sqlcmd `
                    -ServerInstance $serverName `
                    -Database $databaseName `
                    -Username $env:SQL_USERNAME `
                    -Password $env:SQL_PASSWORD `
                    -Query $sqlContent `
                    -Variable $scriptVariables `
                    -QueryTimeout 300 `
                    -ErrorAction Stop
                  
                  $success = $true
                  Write-Host "SQL script executed successfully"
                }
                catch {
                  $retryCount++
                  Write-Warning "Attempt $retryCount of $maxRetries failed: $_"
                  
                  # Check for expected errors that we can ignore
                  if ($_.Exception.Message -match "Cannot find the object" -or 
                      $_.Exception.Message -match "already exists" -or
                      $_.Exception.Message -match "Violation of PRIMARY KEY constraint" -or
                      $_.Exception.Message -match "Variable SqlDeploymentUser is not defined") {
                    Write-Host "Error appears to be non-critical - treating as success"
                    $success = $true
                  }
                  elseif ($retryCount -lt $maxRetries) {
                    Write-Host "Waiting 10 seconds before retry..."
                    Start-Sleep -Seconds 10
                  }
                }
              }
              
              if (-not $success) {
                Write-Error "Failed to execute SQL script after $maxRetries attempts: $($script.Name)"
                $hasErrors = $true
                break
              }
            }
            
            if ($hasErrors) {
              exit 1
            }
          } else {
            Write-Host "No SQL scripts found in Database-Script folder. Skipping database deployment."
          }
        shell: pwsh

  deploy-website:
    runs-on: windows-latest
    needs: [build, deploy-database]
    if: github.event_name != 'pull_request'
    environment:
      name: 'staging'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: website-package
          path: ${{ github.workspace }}
      
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Deploy to Azure Web App Staging Slot
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          slot-name: 'staging'
          package: ${{ github.workspace }}/**/*.zip
      
      - name: Wait for deployment to stabilize
        run: |
          Start-Sleep -Seconds 30
          Write-Host "Waiting for deployment to stabilize..."
        shell: pwsh
      
      # Use Azure CLI to validate deployment instead of HTTP request
      - name: Validate deployment using Azure CLI
        run: |
          Write-Host "Validating staging deployment using Azure CLI..."
          
          $maxRetries = 5
          $retryCount = 0
          $success = $false
          
          while ($retryCount -lt $maxRetries -and -not $success) {
            try {
              # Check app status using Azure CLI
              $status = az webapp show --name ${{ env.AZURE_WEBAPP_NAME }} --slot staging --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "state" -o tsv
              
              Write-Host "Staging app status: $status"
              
              if ($status -eq "Running") {
                Write-Host "Staging deployment validation successful!"
                $success = $true
              } else {
                Write-Host "Staging app is not in Running state. Current state: $status. Retrying..."
                $retryCount++
                Start-Sleep -Seconds 10
              }
            } catch {
              Write-Host "Error checking staging status: $_. Retrying..."
              $retryCount++
              Start-Sleep -Seconds 10
            }
          }
          
          if (-not $success) {
            Write-Error "Staging validation failed after $maxRetries attempts!"
            exit 1
          }
        shell: pwsh

  swap-to-production:
    runs-on: windows-latest
    needs: deploy-website
    if: github.event_name != 'pull_request'
    environment:
      name: 'production'
      url: 'https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net'
    
    steps:
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Swap staging to production
        run: |
          Write-Host "Swapping staging slot to production..."
          az webapp deployment slot swap --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.AZURE_WEBAPP_NAME }} --slot staging --target-slot production
        shell: pwsh
      
      # Use Azure CLI to validate production deployment
      - name: Validate production deployment using Azure CLI
        run: |
          Write-Host "Validating production deployment using Azure CLI..."
          
          $maxRetries = 5
          $retryCount = 0
          $success = $false
          
          while ($retryCount -lt $maxRetries -and -not $success) {
            try {
              # Check app status using Azure CLI
              $status = az webapp show --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "state" -o tsv
              
              Write-Host "Production app status: $status"
              
              if ($status -eq "Running") {
                Write-Host "Production deployment validation successful!"
                $success = $true
              } else {
                Write-Host "Production app is not in Running state. Current state: $status. Retrying..."
                $retryCount++
                Start-Sleep -Seconds 10
              }
            } catch {
              Write-Host "Error checking production status: $_. Retrying..."
              $retryCount++
              Start-Sleep -Seconds 10
            }
          }
          
          if (-not $success) {
            Write-Error "Production validation failed after $maxRetries attempts!"
            exit 1
          }
        shell: pwsh
